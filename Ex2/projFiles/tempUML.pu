@startuml tempUML

title Tank Game UML Diagram

enum orient as "orientation" {
    U = 0 
    UR = 1
    R = 2
    DR = 3
    D = 4 
    DL = 5
    L = 6
    UL = 7
}

enum objT as "objType" {
    W = 0 
    B = 1 
    M = 2
    P1T = 3
    P2T = 4
}

enum mv as "move" {
    moveForward = 1
    moveBackwards = 2
    rotateQuarterLeft = 3
    rotateEighthLeft = 4
    noAction = 5
    rotateEighthRight = 6
    rotateQuarterRight = 7
    shoot = 8
    getBattleInfo = 9
}

class matObj as "matrixObject" {
    - location: int[2]
    - hitsLeft: int
    - type: objType
    + getLocation(): const int*
    + setLocation(row: int, col: int): void
    + getIsAlive(): bool
    + takeAHit(): void
    + getType(): objType
}

class movObj as "movingObject" {
    # orient: orientation
    # oldLocation: int[2]
    + newLocation(): int *
    + getOldLocation(): const int*
    + setNewLocation(row: int, col: int): void
    + getOrient(): orientation
}

class unmovObj as "unmovingObject" {
}

class t as "PlayerTankAlgorithm" {
    - shotsLeft: int
    - inBackwards: int
    - turnsUntilNextShot: int
    - calcMoveRound: int
    + play(): objMove
    + canShoot(): bool
    + isSafe(): bool
}

class b as "bullet" {
}

class m as "mine" {
}

class w as "wall" {
    - hitsLeft = 2
}

class ta as "TankAlgorithm" {
    + getAction(): Action
    + updateBattleInfo(): BattleInfo
}

class p as "Player" {
    - player_index: int
    - playerAlgorithm: vector<TankAlgorithm>
    + getPlayerID(): int
    + getPlayerType(): objType
    + getPlayerAlgorithm(): TankAlgorithm
}

class p1 as "Player1" {
}


ta <|-- t
movObj <|-- t



@enduml